h1 {
    text-align: center
}

.clearfix {
    clear: both;
}
/*------------------------- CONTROLLING REPETITION ---------------------*/
div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: repeat; /*This is the default value and try to filled all the space where the image is beign set, this value repeats the image until filled all space in the container. In some cases the image is cut at the edge of the container*/
}

div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: no-repeat; /*This value only shows one image in the left corner without any repetition*/
}

div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: repeat-x; /*This value repeats the image at the top of the container in horizontal direction, in some cases the image could get cut in the right side of the container*/
}

div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: repeat-y; /*This value repeats the image in vertical direction at the left side, like the repeat-x value this option could get cut, too but at the end of the container, in the down side*/
}

div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: round; /*This value is similar to the repeat value, it fills all the container but without cut the image at the edges, to have this effect the browser adjust the image size and due to this the image get distort in some cases.*/
}

div {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: space; /*This value filled all the container without cut the images at the edges but introduce space between every image to get an apropiete tile.*/
}

/*------------------- POSITIONING BACKGROUND IMAGE ----------------------*/
/* keywords */
.positioning {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: repeat-x;
    background-position: left bottom; /*We can use two set of keywords to position an image, first value can be left, center, right and the second value can be top, center, bottom*/
}

/* Precise values */
.positioning {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: no-repeat;
    background-position: -20px 30px; /*When we use precise values the first value controls the horizontal position and the second value controls the vertical position, while greater are the values closer are from right and bottom edges */
}

/* Porcentages */
.positioning {
    width: 70%;
    height: 500px;
    background-image: url(../img/javascript.webp);
    background-repeat: no-repeat;
    background-position: 80% 80%; /*Using porcentages to positioning an image is a little bit different, the first value indicate horizontal position and the second one indicate the vertical position, these two values get the coordinates to make a point in the style element but also get the coordinates from the background image, so that the coordinates from the container are the first point to insert the background image coordinates and in that way get our image positioned */
}

/*---------------------- FIXING IMAGES IN PLACE ---------------------*/
body {
    background-image: url(../img/javascript.webp);
    background-repeat: no-repeat;
    background-position: right top;
    background-attachment: fixed;/*To make a background image fixed it is neccesary to define the background-attachment property with its value 'fixed'. This property has other value (scroll) but this is the default browser value*/
}

/*---------------------- ORIGIN AND CLIPPING -----------------------*/
.origin-clipping__container{
    border: 7px solid rgba(20, 35, 210, 0.3);
    width: 30%;
    height: 350px; 
    background-image: url(../img/javascript.webp);
    background-repeat: repeat;
    display: inline-block;
    margin-right: 2%;
    box-sizing: border-box;
    padding: 1%;
}

.origin-clipping__text {
    float: left;
    width: 30%;
    margin-right: 2%;
    text-align: center;
    font-weight: 600;
}

.border-box {
    background-origin: border-box; /*The background image begins in the border area*/
    background-clip: border-box /*And it is cut in the border are */
}

.padding-box {
    background-origin: padding-box; /*The background image begins in the padding area*/
    background-clip: padding-box; /*The image is cut in the the padding area (borders are free of images)*/
}

.content-box {
    background-origin: content-box;/*The background image begins in the content are*/
    background-clip: content-box; /*The image is cut in the content area (paddins and borders are free of images)*/
}

/*-------------------- SCALING BACKGROUND IMAGE ------------------*/

.scaling__container {
    width: 25%;
    height: 0;
    background-image: url(../img/javascript.webp);
    background-repeat: no-repeat;
    border: 3px solid rgba(0, 0, 230, 0.7);
    padding-top: 30%; /*To have a responsive container*/
    float: left;
    margin: 1% 2%;
}

.scaling__text {
    float: left;
    width: 25.7%;
    margin: 0 2% 1%;
    text-align: center;
    font-weight: 600;
}

.absolute-scale{
    background-size: 90% auto; /*We can use porcentage values or absolute values like pexels to define a size, the first value indicate the width size and the second one the height size, like in this case, it is possible to indicate just one of the values and the other it is determined by the browser according to the image width to get a ratio image intact.*/
}

.contain-scale {
    background-size: contain; /*The contain keyword fit the image eigther to the width style element or the height style element, but never both this to maintain the aspect ratio of the image*/
}

.cover-scale {
    background-size: cover; /*This value fit the image to the width style element and the height style element and at the same time try to maintain the aspect ratio of the image, so in most of the times the width style element could be fill with the width of the background image or in the other way, saying about the height, but one of them in the background image could be cut by the style element to preserve the ratio*/
}

.absolute-scale:hover {
    background-color: rgba(201, 182, 15, 0.4);
    background-blend-mode: color;
}

/*--------------------- Multiple Background images --------------------*/
.mutiple-image__container{
    width: 75%;
    height: 600px;
    border: 3px solid rgba(20, 35, 210, 0.3);
    margin: 2% auto;
    background-color: rgb(187, 83, 14);
    background-image: url(../img/ultrainstinto.png),
                      url(../img/hit.png),
                      url(../img/jiren.png);
    background-repeat: no-repeat;
    background-position: left top,
                         center top,
                         right top;

    background-size: 25% 600px;
}

/*Here we set three background images in one container, the way we do this is with one property(background-image) containing three values separated with comas. The first value or the first image inserted is above the second one and the second one is above the third one and so on. Like in the previous example if we wanted to declare different position values or different size values we do with three values to every property and the order these values are declared are the same order according to the images.*/

/*---------------------- LINEAR GRADIENTS -------------------*/
.gradient__container {
    width: 20%;
    height: 250px;
    margin: 1% 1%;
    border: 3px solid rgba(0, 0, 0, 0.7);
    float: left;
    display: table;
}

.gradient__text{
    font-size: 25px;
    font-weight: 600;
    color: rgba(0, 0, 0, 0.8);
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}

/*For example if we wanted our linear gradient to start black at the top of the container and transition to white at the bottom of the element, we use 'to bottom' : */
.to__bottom {
    background-image: linear-gradient(to bottom, black, white);
}

/*If we wanted the white color at the left edge and the black at the right: */
.to__left{
    background-image: linear-gradient(to left, black, white);
}

/*Now if we want to get the white color in the right bottom corner and the black in the left top corner: */
.to__right-bottom-corner{
    background-image: linear-gradient(to bottom right, black, white);
}

/*We can also use degree values to set the position and other color values to set the color */
.degree__value {
    background-image: linear-gradient(135deg, rgb(224, 24, 191), rgb(255, 255, 255));
} 
/*Degree values follow the clock direction, for example 90 degrees are equal to right direction, 180 degrees are equal to bottom and so on, also this value indicate where the transition ends. In the previous example the transition ends at the right bottom corner, so that part is color white and this is the same to say 'to right bottom' */

/* Color Stops */
/*You can add more than two colors, the next example starts green at the left, then begins white in the center and end up red in the right*/
.color__stops {
    background-image: linear-gradient(to right, rgb(0, 200, 0), rgb(255, 255, 255), rgb(220, 0, 0));
}

/*You can place the different color stops at more specific locations in the background by adding a second value after the color: */
.specific__location {
    background-image: linear-gradient(to right, rgb(0, 200, 0), rgb(255, 255, 255) 30%, rgb(255, 255,255) 70%,  rgb(220, 0, 0));
}
/*We can use an specific location for one or more colors in our gradient. In this example we use the white color at the 30% of the width element and then the second white color extends to the 70% of the width element. Generally we don't use specific locations for the first and the last color, due to the browser knows that these colors starts at 0% and ends at the 100%, however we can make use of this and add a specific location to these colors to make a solid color further at the beginig or at the end or both.*/

.multiple__gradients {
    background-image: linear-gradient(cyan, transparent),
                      linear-gradient(225deg, magenta, transparent),
                      linear-gradient(45deg, yellow, transparent);
}

/* Repeating Gradients */
.repeating__gradient {
    background-image: repeating-linear-gradient(45deg, rgb(0, 0, 200) 20px, rgb(93, 151, 236) 30px, rgb(0, 0, 200) 40px)
}
/*Here we say that our gradient starts at the bottom left corner with a deep blue color, then at the 20px position starts its transition until 30px, when the light blue is used, then this color ends at the 40px position to turn out in deep blue color again, automatically this last color try to fill the background element, but with the effect of repeating we can stop this function and repeat the process that starts with the first color */

/* Radial Gradients */
.simple__radial {
    background-image: radial-gradient(white, rgb(50, 126, 241));
}

.circle__radial {
    background-image: radial-gradient(circle, white, rgb(50, 126, 241))
}

.radial__position {
    background-image: radial-gradient(circle at 20% 40%, white, rgb(50, 126, 241))
}

.closest-side__radial {
    background-image: radial-gradient(closest-side circle at 20% 40%, white, rgb(50, 126, 241));
}

/* Repeating Radial Gradients */
.repeating__radial {
    background-image: repeating-radial-gradient(circle, red 20px, orange 30px, yellow 40px, red 50px);
}